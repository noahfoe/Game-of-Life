{"version":3,"sources":["logo.svg","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cell","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","React","Component","Game","state","cells","isRunning","interval","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","HEIGHT","WIDTH","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","onClick","ref","n","map","cell","key","onChange","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,4JCOrCC,G,6KACM,IAAD,EACUC,KAAKC,MAAdC,EADD,EACCA,EAAGC,EADJ,EACIA,EACX,OACE,yBACEC,UAAU,OACVC,MAAO,CACLC,KAAK,GAAD,OAXI,GAWaJ,EAAI,EAArB,MACJK,IAAI,GAAD,OAZK,GAYYJ,EAAI,EAArB,MACHK,MAAM,GAAD,OAAKC,GAAL,MACLC,OAAO,GAAD,OAAKD,GAAL,a,GAVGE,IAAMC,YAoOVC,E,kDAlNb,aAAe,IAAD,8BACZ,gBAOFC,MAAQ,CACNC,MAAO,GACPC,WAAW,EACXC,SAAU,KAXE,EAiDdC,YAAc,SAACC,GACb,IAAMC,EAAa,EAAKC,mBAClBC,EAAUH,EAAMI,QAAUH,EAAWlB,EACrCsB,EAAUL,EAAMM,QAAUL,EAAWjB,EAErCD,EAAIwB,KAAKC,MAAML,EA5EP,IA6ERnB,EAAIuB,KAAKC,MAAMH,EA7EP,IA+EVtB,GAAK,GAAKA,GAAK,EAAK0B,MAAQzB,GAAK,GAAKA,GAAK,EAAK0B,OAClD,EAAKC,MAAM3B,GAAGD,IAAM,EAAK4B,MAAM3B,GAAGD,IAGpC,EAAK6B,SAAS,CAAEhB,MAAO,EAAKiB,eA7DhB,EAgEdC,QAAU,WACR,EAAKF,SAAS,CAAEf,WAAW,IAC3B,EAAKkB,gBAlEO,EAqEdC,SAAW,WACT,EAAKJ,SAAS,CAAEf,WAAW,IACvB,EAAKoB,iBACPC,OAAOC,aAAa,EAAKF,gBACzB,EAAKA,eAAiB,OAzEZ,EA8IdG,qBAAuB,SAACpB,GACtB,EAAKY,SAAS,CAAEd,SAAUE,EAAMqB,OAAOC,SA/I3B,EAkJdC,YAAc,WACZ,EAAKZ,MAAQ,EAAKa,iBAClB,EAAKZ,SAAS,CAAEhB,MAAO,EAAKiB,eApJhB,EAuJdY,aAAe,WACb,IAAK,IAAIzC,EAAI,EAAGA,EAAI,EAAK0B,KAAM1B,IAC7B,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAK0B,KAAM1B,IAC7B,EAAK4B,MAAM3B,GAAGD,GAAKwB,KAAKmB,UAAY,GAIxC,EAAKd,SAAS,CAAEhB,MAAO,EAAKiB,eA5J5B,EAAKH,KAAOiB,GACZ,EAAKlB,KAAOmB,GAEZ,EAAKjB,MAAQ,EAAKa,iBALN,E,6DAgBZ,IADA,IAAIb,EAAQ,GACH3B,EAAI,EAAGA,EAAIH,KAAK6B,KAAM1B,IAAK,CAClC2B,EAAM3B,GAAK,GACX,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAK4B,KAAM1B,IAC7B4B,EAAM3B,GAAGD,IAAK,EAIlB,OAAO4B,I,yCAIP,IAAMkB,EAAOhD,KAAKiD,SAASC,wBACrBC,EAAMC,SAASC,gBAErB,MAAO,CACLnD,EAAG8C,EAAK1C,KAAO+B,OAAOiB,YAAcH,EAAII,WACxCpD,EAAG6C,EAAKzC,IAAM8B,OAAOmB,YAAcL,EAAIM,a,kCAMzC,IADA,IAAI1C,EAAQ,GACHZ,EAAI,EAAGA,EAAIH,KAAK6B,KAAM1B,IAC7B,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAK4B,KAAM1B,IACzBF,KAAK8B,MAAM3B,GAAGD,IAChBa,EAAM2C,KAAK,CAAExD,IAAGC,MAKtB,OAAOY,I,qCAkCP,IAHc,IAAD,OACT4C,EAAW3D,KAAK2C,iBAEXxC,EAAI,EAAGA,EAAIH,KAAK6B,KAAM1B,IAC7B,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAK4B,KAAM1B,IAAK,CAClC,IAAI0D,EAAY5D,KAAK6D,mBAAmB7D,KAAK8B,MAAO5B,EAAGC,GACnDH,KAAK8B,MAAM3B,GAAGD,GAEdyD,EAASxD,GAAGD,GADI,IAAd0D,GAAiC,IAAdA,EAMlB5D,KAAK8B,MAAM3B,GAAGD,IAAoB,IAAd0D,IACvBD,EAASxD,GAAGD,IAAK,GAMzBF,KAAK8B,MAAQ6B,EACb3D,KAAK+B,SAAS,CAAEhB,MAAOf,KAAKgC,cAE5BhC,KAAKoC,eAAiBC,OAAOyB,YAAW,WACtC,EAAK5B,iBACJlC,KAAKc,MAAMG,Y,yCASGa,EAAO5B,EAAGC,GAY3B,IAXA,IAAIyD,EAAY,EACVG,EAAO,CACX,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,IAEEC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,IAAME,EAAMH,EAAKC,GACbG,EAAKhE,EAAI+D,EAAI,GACbE,EAAKlE,EAAIgE,EAAI,GAGfE,GAAM,GACNA,EAAKpE,KAAK4B,MACVuC,GAAM,GACNA,EAAKnE,KAAK6B,MACVC,EAAMqC,GAAIC,IAEVR,IAIJ,OAAOA,I,+BAsBC,IAAD,SACgC5D,KAAKc,MAApCC,EADD,EACCA,MAAiBC,GADlB,EACQC,SADR,EACkBD,WACzB,OACE,6BACE,yBACEZ,UAAU,QACVC,MAAO,CACLG,MA7LE,IA8LFE,OA7LG,IA8LH2D,eAAe,GAAD,OAhMR,GAgMQ,cAhMR,GAgMQ,OAEhBC,QAAStE,KAAKkB,YACdqD,IAAK,SAACC,GACJ,EAAKvB,SAAWuB,IAGjBzD,EAAM0D,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,CAAMxE,EAAGwE,EAAKxE,EAAGC,EAAGuE,EAAKvE,EAAGwE,IAAG,UAAKD,EAAKxE,EAAV,YAAewE,EAAKvE,SAIvD,yBAAKC,UAAU,YAAf,eACe,IACb,2BACEqC,MAAOzC,KAAKc,MAAMG,SAClB2D,SAAU5E,KAAKuC,uBACd,IALL,OAOGvB,EACC,4BAAQZ,UAAU,SAASkE,QAAStE,KAAKmC,UAAzC,QAIA,4BAAQ/B,UAAU,SAASkE,QAAStE,KAAKiC,SAAzC,OAIF,4BAAQ7B,UAAU,SAASkE,QAAStE,KAAK4C,cAAzC,UAGA,4BAAQxC,UAAU,SAASkE,QAAStE,KAAK0C,aAAzC,e,GA1MS/B,IAAMC,WCUViE,MA7Bf,WACE,OACE,yBAAKzE,UAAU,OACb,qDACA,kBAAC,EAAD,MACA,sHAIA,+HAIA,sHAIA,uHAIA,oICdc0E,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.efde0eaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./Game.css\";\r\n\r\nconst CELL_SIZE = 20;\r\nconst WIDTH = 800;\r\nconst HEIGHT = 600;\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    const { x, y } = this.props;\r\n    return (\r\n      <div\r\n        className=\"Cell\"\r\n        style={{\r\n          left: `${CELL_SIZE * x + 1}px`,\r\n          top: `${CELL_SIZE * y + 1}px`,\r\n          width: `${CELL_SIZE - 1}px`,\r\n          height: `${CELL_SIZE - 1}px`,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.rows = HEIGHT / CELL_SIZE;\r\n    this.cols = WIDTH / CELL_SIZE;\r\n\r\n    this.board = this.makeEmptyBoard();\r\n  }\r\n\r\n  state = {\r\n    cells: [],\r\n    isRunning: false,\r\n    interval: 100,\r\n  };\r\n\r\n  makeEmptyBoard() {\r\n    let board = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n      board[y] = [];\r\n      for (let x = 0; x < this.cols; x++) {\r\n        board[y][x] = false;\r\n      }\r\n    }\r\n\r\n    return board;\r\n  }\r\n\r\n  getElementOffset() {\r\n    const rect = this.boardRef.getBoundingClientRect();\r\n    const doc = document.documentElement;\r\n\r\n    return {\r\n      x: rect.left + window.pageXOffset - doc.clientLeft,\r\n      y: rect.top + window.pageYOffset - doc.clientTop,\r\n    };\r\n  }\r\n\r\n  makeCells() {\r\n    let cells = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        if (this.board[y][x]) {\r\n          cells.push({ x, y });\r\n        }\r\n      }\r\n    }\r\n\r\n    return cells;\r\n  }\r\n\r\n  handleClick = (event) => {\r\n    const elemOffset = this.getElementOffset();\r\n    const offsetX = event.clientX - elemOffset.x;\r\n    const offsetY = event.clientY - elemOffset.y;\r\n\r\n    const x = Math.floor(offsetX / CELL_SIZE);\r\n    const y = Math.floor(offsetY / CELL_SIZE);\r\n\r\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n      this.board[y][x] = !this.board[y][x];\r\n    }\r\n\r\n    this.setState({ cells: this.makeCells() });\r\n  };\r\n\r\n  runGame = () => {\r\n    this.setState({ isRunning: true });\r\n    this.runIteration();\r\n  };\r\n\r\n  stopGame = () => {\r\n    this.setState({ isRunning: false });\r\n    if (this.timeoutHandler) {\r\n      window.clearTimeout(this.timeoutHandler);\r\n      this.timeoutHandler = null;\r\n    }\r\n  };\r\n\r\n  runIteration() {\r\n    let newBoard = this.makeEmptyBoard();\r\n\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        let neighbors = this.calculateNeighbors(this.board, x, y);\r\n        if (this.board[y][x]) {\r\n          if (neighbors === 2 || neighbors === 3) {\r\n            newBoard[y][x] = true;\r\n          } else {\r\n            newBoard[y][x] = false;\r\n          }\r\n        } else {\r\n          if (!this.board[y][x] && neighbors === 3) {\r\n            newBoard[y][x] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.board = newBoard;\r\n    this.setState({ cells: this.makeCells() });\r\n\r\n    this.timeoutHandler = window.setTimeout(() => {\r\n      this.runIteration();\r\n    }, this.state.interval);\r\n  }\r\n\r\n  /**\r\n   * Calculate the number of neighbors at point (x, y)\r\n   * @param {Array} board\r\n   * @param {int} x\r\n   * @param {int} y\r\n   */\r\n  calculateNeighbors(board, x, y) {\r\n    let neighbors = 0;\r\n    const dirs = [\r\n      [-1, -1],\r\n      [-1, 0],\r\n      [-1, 1],\r\n      [0, 1],\r\n      [1, 1],\r\n      [1, 0],\r\n      [1, -1],\r\n      [0, -1],\r\n    ];\r\n    for (let i = 0; i < dirs.length; i++) {\r\n      const dir = dirs[i];\r\n      let y1 = y + dir[0];\r\n      let x1 = x + dir[1];\r\n\r\n      if (\r\n        x1 >= 0 &&\r\n        x1 < this.cols &&\r\n        y1 >= 0 &&\r\n        y1 < this.rows &&\r\n        board[y1][x1]\r\n      ) {\r\n        neighbors++;\r\n      }\r\n    }\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  handleIntervalChange = (event) => {\r\n    this.setState({ interval: event.target.value });\r\n  };\r\n\r\n  handleClear = () => {\r\n    this.board = this.makeEmptyBoard();\r\n    this.setState({ cells: this.makeCells() });\r\n  };\r\n\r\n  handleRandom = () => {\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        this.board[y][x] = Math.random() >= 0.5;\r\n      }\r\n    }\r\n\r\n    this.setState({ cells: this.makeCells() });\r\n  };\r\n\r\n  render() {\r\n    const { cells, interval, isRunning } = this.state;\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"Board\"\r\n          style={{\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`,\r\n          }}\r\n          onClick={this.handleClick}\r\n          ref={(n) => {\r\n            this.boardRef = n;\r\n          }}\r\n        >\r\n          {cells.map((cell) => (\r\n            <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`} />\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"controls\">\r\n          Update every{\" \"}\r\n          <input\r\n            value={this.state.interval}\r\n            onChange={this.handleIntervalChange}\r\n          />{\" \"}\r\n          msec\r\n          {isRunning ? (\r\n            <button className=\"button\" onClick={this.stopGame}>\r\n              Stop\r\n            </button>\r\n          ) : (\r\n            <button className=\"button\" onClick={this.runGame}>\r\n              Run\r\n            </button>\r\n          )}\r\n          <button className=\"button\" onClick={this.handleRandom}>\r\n            Random\r\n          </button>\r\n          <button className=\"button\" onClick={this.handleClear}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Game from \"./Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Conway's Game of Life</h1>\n      <Game />\n      <h3>\n        Conway's Game of Life is a zero player game that simulates evolution by\n        using 4 rules.\n      </h3>\n      <p>\n        Rule 1: Any live cell with fewer than two live neighbors dies, as if\n        caused by under population.\n      </p>\n      <p>\n        Rule 2: Any live cell with two or three live neighbors lives on to the\n        next generation.\n      </p>\n      <p>\n        Rule 3: Any live cell with more than three live neighbors dies, as if by\n        overpopulation.\n      </p>\n      <p>\n        Rule 4: Any dead cell with exactly three live neighbors becomes a live\n        cell, as if by reproduction.\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}